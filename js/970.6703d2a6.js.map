{"version":3,"file":"js/970.6703d2a6.js","mappings":"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","sources":["webpack://sl-device-vue/./src/views/visitor/add_clean_order_new.vue","webpack://sl-device-vue/src/views/visitor/add_clean_order_new.vue","webpack://sl-device-vue/./src/views/visitor/add_clean_order_new.vue?0582","webpack://sl-device-vue/./src/views/visitor/add_clean_order_new.vue?9701","webpack://sl-device-vue/[name]/webpack/universalModuleDefinition","webpack://sl-device-vue/[name]/webpack/bootstrap","webpack://sl-device-vue/[name]/src/transform/transform.ts","webpack://sl-device-vue/[name]/src/index.ts","webpack://sl-device-vue/[name]/src/download/download.ts","webpack://sl-device-vue/[name]/src/player/player.ts","webpack://sl-device-vue/[name]/src/exception/exception.ts","webpack://sl-device-vue/[name]/src/recorder/recorder.ts","webpack://sl-device-vue/./node_modules/js-audio-recorder/index.js"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"app-container\"},[_c('van-cell',{staticStyle:{\"color\":\"red\"},attrs:{\"title\":\"*请选择保洁原因或者填写保洁说明后保存，随后我们会安排保洁人员上门保洁\"}}),_c('van-field',{attrs:{\"type\":\"tel\",\"readonly\":\"\",\"label\":\"房间号\"},model:{value:(_vm.area.name),callback:function ($$v) {_vm.$set(_vm.area, \"name\", $$v)},expression:\"area.name\"}}),_c('van-field',{attrs:{\"readonly\":\"\",\"clickable\":\"\",\"label\":\"保洁原因\",\"value\":_vm.value,\"placeholder\":\"请选择\"},on:{\"click\":function($event){_vm.showPicker = true}}}),_c('van-popup',{attrs:{\"round\":\"\",\"position\":\"bottom\"},model:{value:(_vm.showPicker),callback:function ($$v) {_vm.showPicker=$$v},expression:\"showPicker\"}},[_c('van-picker',{attrs:{\"show-toolbar\":\"\",\"columns\":_vm.columns},on:{\"cancel\":function($event){_vm.showPicker = false},\"confirm\":_vm.onConfirm}})],1),_c('van-field',{attrs:{\"rows\":\"3\",\"autosize\":\"\",\"label\":\"保洁说明\",\"type\":\"textarea\",\"maxlength\":\"200\",\"placeholder\":\"请输入保洁说明\",\"show-word-limit\":\"\"},model:{value:(_vm.note),callback:function ($$v) {_vm.note=$$v},expression:\"note\"}}),_c('van-cell',{attrs:{\"title\":\"上传图片\",\"value\":\"\"}}),_c('div',{staticStyle:{\"width\":\"100%\",\"padding\":\"0px 5px\"}},[_c('van-uploader',{staticStyle:{\"float\":\"left\"},attrs:{\"multiple\":\"\",\"max-count\":5,\"after-read\":_vm.afterRead,\"max-size\":5 * 1024 * 1024},on:{\"oversize\":_vm.onOversize},model:{value:(_vm.fileList),callback:function ($$v) {_vm.fileList=$$v},expression:\"fileList\"}})],1),_c('van-cell',{attrs:{\"title\":\"录入语音\",\"value\":\"\"}}),_c('van-cell',{staticStyle:{\"color\":\"red\"},attrs:{\"title\":\"*请点击开始录入语音，录入完毕后再点击停止录音\"}}),_c('div',{staticStyle:{\"width\":\"100%\",\"padding\":\"0px 5px\",\"text-align\":\"center\"}},[_c('van-button',{attrs:{\"round\":\"\",\"type\":\"primary\",\"size\":\"small\"},on:{\"click\":_vm.startRecordAudio}},[_vm._v(\"开始录音\")]),_c('span',{staticStyle:{\"display\":\"inline-block\",\"width\":\"70px\",\"font-size\":\"12px\"}},[_vm._v(\"时长:\"+_vm._s(_vm.recorder.duration.toFixed(1)))]),_c('van-button',{attrs:{\"round\":\"\",\"type\":\"primary\",\"size\":\"small\"},on:{\"click\":_vm.stopRecordAudio}},[_vm._v(\"停止录音\")]),_c('van-button',{attrs:{\"round\":\"\",\"type\":\"primary\",\"size\":\"small\"},on:{\"click\":function($event){return _vm.playRecordAudio()}}},[_vm._v(\"播放录音\")])],1),_c('div',{staticStyle:{\"margin\":\"10px 30px\"}},[_c('van-button',{attrs:{\"round\":\"\",\"block\":\"\",\"type\":\"info\",\"icon\":\"checked\"},on:{\"click\":_vm.onSubmit}},[_vm._v(\"保存\")])],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"app-container\">\r\n    <van-cell title=\"*请选择保洁原因或者填写保洁说明后保存，随后我们会安排保洁人员上门保洁\" style=\"color: red;\" />\r\n    <van-field v-model=\"area.name\" type=\"tel\" readonly label=\"房间号\" />\r\n    <van-field\r\n      readonly\r\n      clickable\r\n      label=\"保洁原因\"\r\n      :value=\"value\"\r\n      placeholder=\"请选择\"\r\n      @click=\"showPicker = true\"\r\n    />\r\n    <van-popup v-model=\"showPicker\" round position=\"bottom\">\r\n      <van-picker\r\n        show-toolbar\r\n        :columns=\"columns\"\r\n        @cancel=\"showPicker = false\"\r\n        @confirm=\"onConfirm\"\r\n      />\r\n    </van-popup>\r\n    <van-field\r\n      v-model=\"note\"\r\n      rows=\"3\"\r\n      autosize\r\n      label=\"保洁说明\"\r\n      type=\"textarea\"\r\n      maxlength=\"200\"\r\n      placeholder=\"请输入保洁说明\"\r\n      show-word-limit\r\n    />\r\n    <van-cell title=\"上传图片\" value=\"\" />\r\n    <div style=\"width: 100%;padding: 0px 5px;\">\r\n      <!--电脑选择图片-->\r\n      <van-uploader v-model=\"fileList\" multiple :max-count=\"5\" :after-read=\"afterRead\" :max-size=\"5 * 1024 * 1024\" style=\"float: left;\" @oversize=\"onOversize\" />\r\n    </div>\r\n    <van-cell title=\"录入语音\" value=\"\" />\r\n    <van-cell title=\"*请点击开始录入语音，录入完毕后再点击停止录音\" style=\"color: red;\" />\r\n    <div style=\"width: 100%;padding: 0px 5px;text-align: center;\">\r\n      <van-button round type=\"primary\" size=\"small\" @click=\"startRecordAudio\">开始录音</van-button>\r\n      <span style=\"display: inline-block;width: 70px;font-size: 12px;\">时长:{{ recorder.duration.toFixed(1) }}</span>\r\n      <van-button round type=\"primary\" size=\"small\" @click=\"stopRecordAudio\">停止录音</van-button>\r\n      <van-button round type=\"primary\" size=\"small\" @click=\"playRecordAudio()\">播放录音</van-button>\r\n      <!--      <audio v-if=\"audioUrl\" ref=\"audioPlayer\" :src=\"audioUrl\" controls style=\"display:inline-block;margin: 10px auto;\" />-->\r\n    </div>\r\n    <div style=\"margin: 10px 30px;\">\r\n      <van-button round block type=\"info\" icon=\"checked\" @click=\"onSubmit\">保存</van-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Recorder from 'js-audio-recorder'\r\n\r\nexport default {\r\n  name: 'AddCleanOrder',\r\n  data() {\r\n    return {\r\n      project_code: '', // 项目编号\r\n      area_id: null,\r\n      area: {},\r\n\r\n      value: '',\r\n      showPicker: false,\r\n      columns: ['房间需要打扫', '垃圾需要清理', '洗漱用品需要更换', '被褥床单需要更换'],\r\n\r\n      note: '',\r\n      fileList: [],\r\n\r\n      beginRecoding: false, // 是否正在录入语音\r\n      recorder: new Recorder({\r\n        sampleBits: 16, // 采样位数，支持 8 或 16，默认是16\r\n        sampleRate: 16000, // 采样率，支持 11025、16000、22050、24000、44100、48000，根据浏览器默认值，我的chrome是48000\r\n        numChannels: 1 // 声道，支持 1 或 2， 默认是1\r\n        // compiling: false,(0.x版本中生效,1.x增加中)  // 是否边录边转换，默认是false\r\n      }),\r\n      nowDuration: '', // 录音时长\r\n      audioUrl: ''// 录音播放地址\r\n    }\r\n  },\r\n  async mounted() {\r\n    this.project_code = this.$route.query.project_code\r\n    this.area_id = this.$route.query.area_id\r\n    this.area = await this.$http.post('/visitor/building-info/get-area', { project_code: this.project_code, area_id: this.area_id })\r\n  },\r\n  // 销毁实例\r\n  beforeDestroy() {\r\n    this.destroyRecorder()\r\n  },\r\n  methods: {\r\n    onConfirm(value) {\r\n      this.value = value\r\n      if (this.note) {\r\n        this.note = this.note + ',' + value\r\n      } else {\r\n        this.note = value\r\n      }\r\n      this.showPicker = false\r\n    },\r\n    afterRead(file) {\r\n      // 此时可以自行将文件上传至服务器\r\n    },\r\n    onOversize(file) {\r\n      this.$toast('文件大小不能超过 5 * 1024kb')\r\n    },\r\n    // 开始录音\r\n    startRecordAudio() {\r\n      Recorder.getPermission().then(\r\n        () => {\r\n          console.log('开始录音')\r\n          this.recorder.start()// 开始录音\r\n        },\r\n        (error) => {\r\n          this.$toast('请先允许该网页使用麦克风')\r\n          console.log(`${error.name} : ${error.message}`)\r\n        }\r\n      )\r\n    },\r\n    // 停止录音\r\n    stopRecordAudio() {\r\n      console.log('停止录音')\r\n      this.recorder.stop()\r\n    },\r\n    // 播放录音\r\n    playRecordAudio() {\r\n      console.log('播放录音')\r\n      this.recorder.play()\r\n    },\r\n    // 销毁录音\r\n    destroyRecorder() {\r\n      if (this.recorder) {\r\n        this.recorder.destroy()\r\n        this.recorder = null\r\n      }\r\n    },\r\n    // 上传wav录音数据\r\n    async uploadWAVData() {\r\n      const wavBlob = this.recorder.getWAVBlob()\r\n      if (wavBlob == null || this.recorder.duration.toFixed(1) < 1) { // 未录音或者录音时间小于1秒\r\n        return null\r\n      }\r\n      console.log('开始上传')\r\n      // 创建一个formData对象\r\n      const formData = new FormData()\r\n      // 此处获取到blob对象后需要设置fileName满足当前项目上传需求，其它项目可直接传把blob作为file塞入formData\r\n      const newbolb = new Blob([wavBlob], { type: 'audio/wav' })\r\n      // 获取当时时间戳作为文件名\r\n      const fileOfBlob = new File([newbolb], new Date().getTime() + '.wav')\r\n      formData.append('file', fileOfBlob)\r\n      // 使用axios发送请求\r\n      return await this.$postFile('/visitor/audio/upload', formData)\r\n    },\r\n    async onSubmit() {\r\n      let isRecorderAudio = true\r\n      const wavBlob = this.recorder.getWAVBlob()\r\n      if (wavBlob == null || this.recorder.duration.toFixed(1) < 1) { // 未录音或者录音时间小于1秒\r\n        isRecorderAudio = false\r\n      }\r\n\r\n      if (!this.note && !isRecorderAudio) {\r\n        this.$toast('请填写保洁说明或者录入语言')\r\n        return\r\n      }\r\n      const fileArr = []\r\n      if (this.fileList && this.fileList.length > 0) {\r\n        this.fileList.map(item => {\r\n          if (item && item.content) {\r\n            fileArr.push(item.content.substring(item.content.indexOf(',') + 1))\r\n          }\r\n        })\r\n      }\r\n\r\n      const confirm = await this.$dialog.confirm({\r\n        title: '标题',\r\n        message: '是否确认保存？'\r\n      }).catch(() => {})\r\n      if (!confirm) return\r\n\r\n      // 先上传语音数据\r\n      const audioUrl = await this.uploadWAVData()\r\n\r\n      await this.$http.post('/visitor/clean-ticket/save', { project_code: this.project_code, name: this.area.name, area_id: this.area_id, note: this.note, file_list: fileArr, audioUrl: audioUrl })\r\n      this.value = ''\r\n      this.note = ''\r\n      this.fileList = []\r\n      this.nowDuration = ''\r\n      this.audioUrl = ''\r\n      this.$dialog.alert({\r\n        message: '保存成功！'\r\n      }).then(() => {})\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.app-container {\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: auto;\r\n  background-color: #fff;\r\n  color: rgb(153, 153, 153);\r\n  p {\r\n    margin: 0 0 5px 0;\r\n  }\r\n  .row{\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n}\r\n</style>\r\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./add_clean_order_new.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./add_clean_order_new.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./add_clean_order_new.vue?vue&type=template&id=7fa511b8&scoped=true\"\nimport script from \"./add_clean_order_new.vue?vue&type=script&lang=js\"\nexport * from \"./add_clean_order_new.vue?vue&type=script&lang=js\"\nimport style0 from \"./add_clean_order_new.vue?vue&type=style&index=0&id=7fa511b8&prod&lang=less&scoped=true\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"7fa511b8\",\n  null\n  \n)\n\nexport default component.exports","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Recorder\"] = factory();\n\telse\n\t\troot[\"Recorder\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","interface dataview {\r\n    byteLength: number,\r\n    buffer: {\r\n        byteLength: number,\r\n    },\r\n    getUint8: any,\r\n}\r\n\r\n/**\r\n * 在data中的offset位置开始写入str字符串\r\n * @param {TypedArrays} data    二进制数据\r\n * @param {Number}      offset  偏移量\r\n * @param {String}      str     字符串\r\n */\r\nfunction writeString(data, offset, str): void {\r\n    for (let i = 0; i < str.length; i++) {\r\n        data.setUint8(offset + i, str.charCodeAt(i));\r\n    }\r\n}\r\n\r\n/**\r\n * 数据合并压缩\r\n * 根据输入和输出的采样率压缩数据，\r\n * 比如输入的采样率是48k的，我们需要的是（输出）的是16k的，由于48k与16k是3倍关系，\r\n * 所以输入数据中每隔3取1位\r\n *\r\n * @param {float32array} data       [-1, 1]的pcm数据\r\n * @param {number} inputSampleRate  输入采样率\r\n * @param {number} outputSampleRate 输出采样率\r\n * @returns  {float32array}         压缩处理后的二进制数据\r\n */\r\nexport function compress(data, inputSampleRate: number, outputSampleRate: number) {\r\n    // 压缩，根据采样率进行压缩\r\n    let rate = inputSampleRate / outputSampleRate,\r\n        compression = Math.max(rate, 1),\r\n        lData = data.left,\r\n        rData = data.right,\r\n        length = Math.floor(( lData.length + rData.length ) / rate),\r\n        result = new Float32Array(length),\r\n        index = 0,\r\n        j = 0;\r\n\r\n    // 循环间隔 compression 位取一位数据\r\n    while (index < length) {\r\n        // 取整是因为存在比例compression不是整数的情况\r\n        let temp = Math.floor(j);\r\n\r\n        result[index] = lData[temp];\r\n        index++;\r\n\r\n        if (rData.length) {\r\n            /*\r\n            * 双声道处理\r\n            * e.inputBuffer.getChannelData(0)得到了左声道4096个样本数据，1是右声道的数据，\r\n            * 此处需要组和成LRLRLR这种格式，才能正常播放，所以要处理下\r\n            */\r\n            result[index] = rData[temp];\r\n            index++;\r\n        }\r\n\r\n        j += compression;\r\n    }\r\n    // 返回压缩后的一维数据\r\n    return result;\r\n}\r\n\r\n/**\r\n * 转换到我们需要的对应格式的编码\r\n *\r\n * @param {float32array} bytes      pcm二进制数据\r\n * @param {number}  sampleBits      采样位数\r\n * @param {boolean} littleEdian     是否是小端字节序\r\n * @returns {dataview}              pcm二进制数据\r\n */\r\nexport function encodePCM(bytes, sampleBits: number, littleEdian: boolean = true) {\r\n    let offset = 0,\r\n        dataLength = bytes.length * (sampleBits / 8),\r\n        buffer = new ArrayBuffer(dataLength),\r\n        data = new DataView(buffer);\r\n\r\n    // 写入采样数据\r\n    if (sampleBits === 8) {\r\n        for (let i = 0; i < bytes.length; i++, offset++) {\r\n            // 范围[-1, 1]\r\n            let s = Math.max(-1, Math.min(1, bytes[i]));\r\n            // 8位采样位划分成2^8=256份，它的范围是0-255;\r\n            // 对于8位的话，负数*128，正数*127，然后整体向上平移128(+128)，即可得到[0,255]范围的数据。\r\n            let val = s < 0 ? s * 128 : s * 127;\r\n            val = +val + 128;\r\n            data.setInt8(offset, val);\r\n        }\r\n    } else {\r\n        for (let i = 0; i < bytes.length; i++, offset += 2) {\r\n            let s = Math.max(-1, Math.min(1, bytes[i]));\r\n            // 16位的划分的是2^16=65536份，范围是-32768到32767\r\n            // 因为我们收集的数据范围在[-1,1]，那么你想转换成16位的话，只需要对负数*32768,对正数*32767,即可得到范围在[-32768,32767]的数据。\r\n            data.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, littleEdian);\r\n        }\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\n/**\r\n * 编码wav，一般wav格式是在pcm文件前增加44个字节的文件头，\r\n * 所以，此处只需要在pcm数据前增加下就行了。\r\n *\r\n * @param {DataView} bytes           pcm二进制数据\r\n * @param {number}  inputSampleRate  输入采样率\r\n * @param {number}  outputSampleRate 输出采样率\r\n * @param {number}  numChannels      声道数\r\n * @param {number}  oututSampleBits  输出采样位数\r\n * @param {boolean} littleEdian      是否是小端字节序\r\n * @returns {DataView}               wav二进制数据\r\n */\r\nexport function encodeWAV(bytes: dataview, inputSampleRate: number, outputSampleRate: number, numChannels: number, oututSampleBits: number, littleEdian: boolean = true) {\r\n    let sampleRate = outputSampleRate > inputSampleRate ? inputSampleRate : outputSampleRate,   // 输出采样率较大时，仍使用输入的值，\r\n        sampleBits = oututSampleBits,\r\n        buffer = new ArrayBuffer(44 + bytes.byteLength),\r\n        data = new DataView(buffer),\r\n        channelCount = numChannels, // 声道\r\n        offset = 0;\r\n\r\n    // 资源交换文件标识符\r\n    writeString(data, offset, 'RIFF'); offset += 4;\r\n    // 下个地址开始到文件尾总字节数,即文件大小-8\r\n    data.setUint32(offset, 36 + bytes.byteLength, littleEdian); offset += 4;\r\n    // WAV文件标志\r\n    writeString(data, offset, 'WAVE'); offset += 4;\r\n    // 波形格式标志\r\n    writeString(data, offset, 'fmt '); offset += 4;\r\n    // 过滤字节,一般为 0x10 = 16\r\n    data.setUint32(offset, 16, littleEdian); offset += 4;\r\n    // 格式类别 (PCM形式采样数据)\r\n    data.setUint16(offset, 1, littleEdian); offset += 2;\r\n    // 声道数\r\n    data.setUint16(offset, channelCount, littleEdian); offset += 2;\r\n    // 采样率,每秒样本数,表示每个通道的播放速度\r\n    data.setUint32(offset, sampleRate, littleEdian); offset += 4;\r\n    // 波形数据传输率 (每秒平均字节数) 声道数 × 采样频率 × 采样位数 / 8\r\n    data.setUint32(offset, channelCount * sampleRate * (sampleBits / 8), littleEdian); offset += 4;\r\n    // 快数据调整数 采样一次占用字节数 声道数 × 采样位数 / 8\r\n    data.setUint16(offset, channelCount * (sampleBits / 8), littleEdian); offset += 2;\r\n    // 采样位数\r\n    data.setUint16(offset, sampleBits, littleEdian); offset += 2;\r\n    // 数据标识符\r\n    writeString(data, offset, 'data'); offset += 4;\r\n    // 采样数据总数,即数据总大小-44\r\n    data.setUint32(offset, bytes.byteLength, littleEdian); offset += 4;\r\n\r\n    // 给wav头增加pcm体\r\n    for (let i = 0; i < bytes.byteLength;) {\r\n        data.setUint8(offset, bytes.getUint8(i));\r\n        offset++;\r\n        i++;\r\n    }\r\n\r\n    return data;\r\n}\r\n","import { downloadPCM, downloadWAV, download } from './download/download';\r\nimport { compress, encodePCM, encodeWAV } from './transform/transform';\r\nimport Player from './player/player';\r\nimport Recorder from './recorder/recorder';\r\n\r\ndeclare let window: any;\r\ndeclare let Math: any;\r\ndeclare let navigator: any;\r\ndeclare let Promise: any;\r\n\r\n// 构造函数参数格式\r\ninterface recorderConfig {\r\n    sampleBits?: number,        // 采样位数\r\n    sampleRate?: number,        // 采样率\r\n    numChannels?: number,       // 声道数\r\n    compiling?: boolean,        // 是否边录边播\r\n}\r\n\r\nclass Index extends Recorder {\r\n    private isrecording: boolean = false;       // 是否正在录音\r\n    private ispause: boolean = false;           // 是否是暂停\r\n    private isplaying: boolean = false;         // 是否正在播放\r\n\r\n    public onplay: () => void;                  // 音频播放回调\r\n    public onpauseplay: () => void;             // 音频暂停回调\r\n    public onresumeplay: () => void;            // 音频恢复播放回调\r\n    public onstopplay: () => void;              // 音频停止播放回调\r\n    public onplayend: () => void;               // 音频正常播放结束\r\n    /**\r\n     * @param {Object} options 包含以下三个参数：\r\n     * sampleBits，采样位数，一般8,16，默认16\r\n     * sampleRate，采样率，一般 11025、16000、22050、24000、44100、48000，默认为浏览器自带的采样率\r\n     * numChannels，声道，1或2\r\n     */\r\n    constructor(options: recorderConfig = {}) {\r\n        super(options);\r\n    }\r\n\r\n    /**\r\n     * 重新修改配置\r\n     *\r\n     * @param {recorderConfig} [options={}]\r\n     * @memberof Recorder\r\n     */\r\n    public setOption(options: recorderConfig = {}) {\r\n        this.setNewOption(options);\r\n    }\r\n\r\n    /**\r\n     * Start the recording\r\n     */\r\n    start(): Promise<{}> {\r\n        if (this.isrecording) {\r\n            // 正在录音，则不允许\r\n            return Promise.reject();\r\n        }\r\n\r\n        this.isrecording = true;\r\n\r\n        return this.startRecord();\r\n    }\r\n\r\n    /**\r\n     * Pause the recording\r\n     */\r\n    pause(): void {\r\n        if (this.isrecording && !this.ispause) {\r\n            this.ispause = true;\r\n            // 当前不暂停的时候才可以暂停\r\n            this.pauseRecord();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 继续录音\r\n     */\r\n    resume(): void {\r\n        if (this.isrecording && this.ispause) {\r\n            this.ispause = false;\r\n            this.resumeRecord();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 停止录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    stop(): void {\r\n        if (this.isrecording) {\r\n            this.isrecording = false;\r\n            this.ispause = false;\r\n            this.stopRecord();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 播放录音\r\n     */\r\n    play(): void {\r\n        this.stop();\r\n        // 关闭前一次音频播放\r\n        this.isplaying = true;\r\n\r\n        this.onplay && this.onplay();\r\n        Player.addPlayEnd(this.onplayend);  // 注册播放完成后的回调事件\r\n\r\n        const dataV = this.getWAV();\r\n\r\n        if (dataV.byteLength > 44) {\r\n            Player.play(dataV.buffer);  // 播放\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取已经播放了多长时间\r\n     */\r\n    getPlayTime(): number {\r\n        return Player.getPlayTime();\r\n    }\r\n\r\n    /**\r\n     * 暂停播放录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    pausePlay(): void {\r\n        if (this.isrecording || !this.isplaying) {\r\n            // 正在录音或没有播放，暂停无效\r\n            return;\r\n        }\r\n\r\n        this.isplaying = false;\r\n        this.onpauseplay && this.onpauseplay();\r\n        Player.pausePlay();\r\n    }\r\n\r\n    /**\r\n     * 恢复播放录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    resumePlay(): void {\r\n        if (this.isrecording || this.isplaying) {\r\n            // 正在录音或已经播放或没开始播放，恢复无效\r\n            return;\r\n        }\r\n\r\n        this.isplaying = true;\r\n        this.onresumeplay && this.onresumeplay();\r\n        Player.resumePlay();\r\n    }\r\n\r\n    /**\r\n     * 停止播放\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    stopPlay(): void {\r\n        if (this.isrecording) {\r\n            // 正在录音，停止录音播放无效\r\n            return;\r\n        }\r\n\r\n        this.isplaying = false;\r\n        this.onstopplay && this.onstopplay();\r\n        Player.stopPlay();\r\n    }\r\n\r\n    destroy(): Promise<{}> {\r\n        Player.destroyPlay();\r\n\r\n        return this.destroyRecord();\r\n    }\r\n\r\n    /**\r\n     * 获取当前已经录音的PCM音频数据\r\n     *\r\n     * @returns[DataView]\r\n     * @memberof Recorder\r\n     */\r\n    // getWholeData() {\r\n    //     return this.tempPCM;\r\n    // }\r\n\r\n    /**\r\n     * 获取余下的新数据，不包括 getNextData 前一次获取的数据\r\n     *\r\n     * @returns [DataView]\r\n     * @memberof Recorder\r\n     */\r\n    // getNextData() {\r\n    //     let length = this.tempPCM.length,\r\n    //         data = this.tempPCM.slice(this.offset);\r\n\r\n    //     this.offset = length;\r\n\r\n    //     return data;\r\n    // }\r\n\r\n    /**\r\n     * 获取当前录音的波形数据，\r\n     * 调取频率由外部控制。\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    getRecordAnalyseData(): any {\r\n        return this.getAnalyseData();\r\n    }\r\n\r\n    /**\r\n     * 获取录音播放时的波形数据，\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    getPlayAnalyseData(): any {\r\n        // 现在录音和播放不允许同时进行，所有复用的录音的analyser节点。\r\n        return Player.getAnalyseData();\r\n    }\r\n\r\n    getPCM(): any {\r\n        // 先停止\r\n        this.stop();\r\n        // 获取pcm数据\r\n        let data: any = this.getData();\r\n        // 根据输入输出比例 压缩或扩展\r\n        data = compress(data, this.inputSampleRate, this.outputSampleRate);\r\n        // 按采样位数重新编码\r\n        return encodePCM(data, this.oututSampleBits, this.littleEdian);\r\n    }\r\n\r\n    /**\r\n     * 获取PCM格式的blob数据\r\n     *\r\n     * @returns { blob }  PCM格式的blob数据\r\n     * @memberof Recorder\r\n     */\r\n    getPCMBlob(): any {\r\n        return new Blob([ this.getPCM() ]);\r\n    }\r\n\r\n    /**\r\n     * 下载录音pcm数据\r\n     *\r\n     * @param {string} [name='recorder']    重命名的名字\r\n     * @memberof Recorder\r\n     */\r\n    downloadPCM(name: string = 'recorder'): void {\r\n        let pcmBlob = this.getPCMBlob();\r\n\r\n        downloadPCM(pcmBlob, name);\r\n    }\r\n\r\n    /**\r\n     * 获取WAV编码的二进制数据(dataview)\r\n     *\r\n     * @returns {dataview}  WAV编码的二进制数据\r\n     * @memberof Recorder\r\n     */\r\n    getWAV(): any {\r\n        let pcmTemp = this.getPCM();\r\n\r\n        // PCM增加44字节的头就是WAV格式了\r\n        return encodeWAV(pcmTemp, this.inputSampleRate,\r\n            this.outputSampleRate, this.config.numChannels, this.oututSampleBits, this.littleEdian);;\r\n    }\r\n\r\n    /**\r\n     * 获取WAV音频的blob数据\r\n     *\r\n     * @returns { blob }    wav格式blob数据\r\n     * @memberof Recorder\r\n     */\r\n    getWAVBlob(): any {\r\n        return new Blob([ this.getWAV() ], { type: 'audio/wav' });\r\n    }\r\n\r\n    /**\r\n     * 下载录音的wav数据\r\n     *\r\n     * @param {string} [name='recorder']    重命名的名字\r\n     * @memberof Recorder\r\n     */\r\n    downloadWAV(name: string = 'recorder'): void {\r\n        let wavBlob = this.getWAVBlob();\r\n\r\n        downloadWAV(wavBlob, name);\r\n    }\r\n\r\n    /**\r\n     * 通用的下载接口\r\n     */\r\n    download(blob, name: string, type: string): void {\r\n        download(blob, name, type);\r\n    }\r\n\r\n    /**\r\n     * 获取左和右声道的数据\r\n     *\r\n     * @returns [DataView]\r\n     */\r\n    getChannelData(): any {\r\n        const all = this.getPCM();\r\n        const length = all.byteLength;\r\n        const littleEdian = this.littleEdian\r\n        const res = { left: null, right: null }\r\n\r\n        if (this.config.numChannels === 2) {\r\n            // 双通道,劈开\r\n            const lD = new DataView(new ArrayBuffer(length / 2))\r\n            const rD = new DataView(new ArrayBuffer(length / 2))\r\n            // 双声道，需要拆分下数据\r\n\r\n            if (this.config.sampleBits === 16) {\r\n                for (var i = 0; i < length / 2; i += 2) {\r\n                    lD.setInt16(i, all.getInt16(i * 2, littleEdian), littleEdian)\r\n                    rD.setInt16(i, all.getInt16(i * 2 + 2, littleEdian), littleEdian)\r\n                }\r\n            } else {\r\n                for (var i = 0; i < length / 2; i += 2) {\r\n                    lD.setInt8(i, all.getInt8(i * 2))\r\n                    rD.setInt8(i, all.getInt8(i * 2 + 1))\r\n                }\r\n            }\r\n\r\n            res.left = lD\r\n            res.right = rD\r\n        } else {\r\n            // 单通道\r\n            res.left = all\r\n        }\r\n\r\n        return res\r\n    }\r\n}\r\n\r\nexport default Index;\r\n","/**\r\n * 下载录音文件\r\n * @private\r\n * @param {*} blob      blob数据\r\n * @param {string} name 下载的文件名\r\n * @param {string} type 下载的文件后缀\r\n */\r\nfunction _download(blob, name: string, type: string): void {\r\n    let oA = document.createElement('a');\r\n\r\n    oA.href = window.URL.createObjectURL(blob);\r\n    oA.download = `${ name }.${ type }`;\r\n    oA.click();\r\n}\r\n\r\n/**\r\n * 下载录音的wav数据\r\n *\r\n * @param {blob}   需要下载的blob数据类型\r\n * @param {string} [name='recorder']    重命名的名字\r\n */\r\nexport function downloadWAV(wavblob, name: string = 'recorder'): void {\r\n    _download(wavblob, name, 'wav');\r\n}\r\n\r\n/**\r\n * 下载录音pcm数据\r\n *\r\n * @param {blob}   需要下载的blob数据类型\r\n * @param {string} [name='recorder']    重命名的名字\r\n * @memberof Recorder\r\n */\r\nexport function downloadPCM(pcmBlob, name: string = 'recorder'): void {\r\n    _download(pcmBlob, name, 'pcm');\r\n}\r\n\r\n// 通用下载接口\r\nexport function download(blob, name: string, type: string) {\r\n    return _download(blob, name, type)\r\n}\r\n","import { throwError } from '../exception/exception'\r\n\r\ndeclare let window: any;\r\n\r\nlet source: any = null;\r\nlet playTime: number = 0;       // 相对时间，记录暂停位置\r\nlet playStamp: number = 0;      // 开始或暂停后开始的时间戳(绝对)\r\nlet context: any = null;\r\nlet analyser: any = null;\r\n\r\nlet audioData: any = null;\r\n// let hasInit: boolean = false;           // 是否已经初始化了\r\nlet isPaused: boolean = false;\r\nlet totalTime: number = 0;\r\nlet endplayFn: any = function() {};\r\n\r\n/**\r\n * 初始化\r\n */\r\nfunction init(): void {\r\n    context = new (window.AudioContext || window.webkitAudioContext)();\r\n    analyser = context.createAnalyser();\r\n    analyser.fftSize = 2048;                   // 表示存储频域的大小\r\n}\r\n\r\n/**\r\n * play\r\n * @returns {Promise<{}>}\r\n */\r\nfunction playAudio(): Promise<{}> {\r\n    isPaused = false;\r\n\r\n    return context.decodeAudioData(audioData.slice(0), buffer => {\r\n        source = context.createBufferSource();\r\n\r\n        // 播放结束的事件绑定\r\n        source.onended = () => {\r\n            if (!isPaused) {  // 暂停的时候也会触发该事件\r\n                // 计算音频总时长\r\n                totalTime = context.currentTime - playStamp + playTime;\r\n                endplayFn();\r\n            }\r\n\r\n        }\r\n\r\n        // 设置数据\r\n        source.buffer = buffer;\r\n        // connect到分析器，还是用录音的，因为播放时不能录音的\r\n        source.connect(analyser);\r\n        analyser.connect(context.destination);\r\n        source.start(0, playTime);\r\n\r\n        // 记录当前的时间戳，以备暂停时使用\r\n        playStamp = context.currentTime;\r\n    }, function(e) {\r\n        throwError(e);\r\n    });\r\n}\r\n\r\n// 销毁source, 由于 decodeAudioData 产生的source每次停止后就不能使用，所以暂停也意味着销毁，下次需重新启动。\r\nfunction destroySource() {\r\n    if (source) {\r\n        source.stop();\r\n        source = null;\r\n    }\r\n}\r\n\r\nexport default class Player {\r\n    /**\r\n     * play record\r\n     * @static\r\n     * @param {ArrayBuffer} arraybuffer\r\n     * @memberof Player\r\n     */\r\n    static play(arraybuffer): Promise<{}> {\r\n        if (!context) {\r\n            // 第一次播放要初始化\r\n            init();\r\n        }\r\n        this.stopPlay();\r\n        // 缓存播放数据\r\n        audioData = arraybuffer;\r\n        totalTime = 0;\r\n\r\n        return playAudio();\r\n    }\r\n\r\n    /**\r\n     * 暂停播放录音\r\n     * @memberof Player\r\n     */\r\n    static pausePlay(): void {\r\n        destroySource();\r\n        // 多次暂停需要累加\r\n        playTime += context.currentTime - playStamp;\r\n        isPaused = true;\r\n    }\r\n\r\n    /**\r\n     * 恢复播放录音\r\n     * @memberof Player\r\n     */\r\n    static resumePlay(): Promise<{}> {\r\n        return playAudio();\r\n    }\r\n\r\n    /**\r\n     * 停止播放\r\n     * @memberof Player\r\n     */\r\n    static stopPlay() {\r\n        playTime = 0;\r\n        audioData = null;\r\n\r\n        destroySource();\r\n    }\r\n\r\n    static destroyPlay() {\r\n        this.stopPlay();\r\n    }\r\n\r\n    static getAnalyseData() {\r\n        let dataArray = new Uint8Array(analyser.frequencyBinCount);\r\n        // 将数据拷贝到dataArray中。\r\n        analyser.getByteTimeDomainData(dataArray);\r\n\r\n        return dataArray;\r\n    }\r\n\r\n    /**\r\n     * 增加录音播放完成的事件绑定\r\n     *\r\n     * @static\r\n     * @param {*} [fn=function() {}]\r\n     * @memberof Player\r\n     */\r\n    static addPlayEnd(fn: any = function() {}) {\r\n        endplayFn = fn;\r\n    }\r\n\r\n    // 获取已经播放的时长\r\n    static getPlayTime(): number {\r\n        let pTime = isPaused ? playTime : context.currentTime - playStamp + playTime;\r\n\r\n        return totalTime || pTime;\r\n    }\r\n}\r\n","/**\r\n * 异常处理\r\n * @static\r\n * @param {*} message   错误消息\r\n */\r\nexport function throwError(message: string) {\r\n    throw new Error(message);\r\n}\r\n","import { compress, encodePCM, encodeWAV } from '../transform/transform';\r\n\r\ndeclare let window: any;\r\ndeclare let Math: any;\r\ndeclare let navigator: any;\r\ndeclare let Promise: any;\r\n\r\n// 构造函数参数格式\r\ninterface recorderConfig {\r\n    sampleBits?: number,        // 采样位数\r\n    sampleRate?: number,        // 采样率\r\n    numChannels?: number,       // 声道数\r\n    compiling?: boolean,        // 是否边录边播\r\n}\r\n\r\nexport default class Recorder {\r\n    private context: any;\r\n    protected config: recorderConfig;               // 配置\r\n    private analyser: any;\r\n    private size: number = 0;                       // 录音文件总长度\r\n    private lBuffer: Array<Float32Array> = [];      // pcm音频数据搜集器(左声道)\r\n    private rBuffer: Array<Float32Array> = [];      // pcm音频数据搜集器(右声道)\r\n    private PCM: any;                               // 最终的PCM数据缓存，避免多次encode\r\n    private tempPCM: Array<DataView> = [];          // 边录边转时临时存放pcm的\r\n    private audioInput: any;\r\n    protected inputSampleRate: number;              // 输入采样率\r\n    protected inputSampleBits: number = 16;         // 输入采样位数\r\n    protected outputSampleRate: number;             // 输出采样率\r\n    protected oututSampleBits: number;              // 输出采样位数\r\n    private source: any;                            // 音频输入\r\n    private recorder: any;\r\n    private stream: any;                            // 流\r\n    protected littleEdian: boolean;                 // 是否是小端字节序\r\n    protected fileSize: number = 0;                 // 录音大小，byte为单位\r\n    protected duration: number = 0;                 // 录音时长\r\n    private needRecord: boolean = true;             // 由于safari问题，导致使用该方案代替disconnect/connect方案\r\n    // 正在录音时间，参数是已经录了多少时间了\r\n    public onprocess: (duration: number) => void;\r\n    // onprocess 替代函数，保持原来的 onprocess 向下兼容\r\n    public onprogress: (payload: {\r\n        duration: number,\r\n        fileSize: number,\r\n        vol: number,\r\n        // data: Array<DataView>,      // 当前存储的所有录音数据\r\n    }) => void;\r\n    public onplay: () => void;                  // 音频播放回调\r\n    public onpauseplay: () => void;             // 音频暂停回调\r\n    public onresumeplay: () => void;            // 音频恢复播放回调\r\n    public onstopplay: () => void;              // 音频停止播放回调\r\n    public onplayend: () => void;               // 音频正常播放结束\r\n\r\n    /**\r\n     * @param {Object} options 包含以下三个参数：\r\n     * sampleBits，采样位数，一般8,16，默认16\r\n     * sampleRate，采样率，一般 11025、16000、22050、24000、44100、48000，默认为浏览器自带的采样率\r\n     * numChannels，声道，1或2\r\n     */\r\n    constructor(options: recorderConfig = {}) {\r\n        // 临时audioContext，为了获取输入采样率的\r\n        let context = new (window.AudioContext || window.webkitAudioContext)();\r\n\r\n        this.inputSampleRate = context.sampleRate;     // 获取当前输入的采样率\r\n\r\n        // 设置输出配置\r\n        this.setNewOption(options);\r\n\r\n        // 判断端字节序\r\n        this.littleEdian = (function() {\r\n            let buffer = new ArrayBuffer(2);\r\n            new DataView(buffer).setInt16(0, 256, true);\r\n            return new Int16Array(buffer)[0] === 256;\r\n        })();\r\n        // 兼容 getUserMedia\r\n        Recorder.initUserMedia();\r\n    }\r\n\r\n    protected setNewOption(options: recorderConfig = {}) {\r\n        this.config = {\r\n            // 采样数位 8, 16\r\n            sampleBits: ~[8, 16].indexOf(options.sampleBits) ? options.sampleBits : 16,\r\n            // 采样率\r\n            sampleRate: ~[8000, 11025, 16000, 22050, 24000, 44100, 48000].indexOf(options.sampleRate) ? options.sampleRate : this.inputSampleRate,\r\n            // 声道数，1或2\r\n            numChannels: ~[1, 2].indexOf(options.numChannels) ? options.numChannels : 1,\r\n            // 是否需要边录边转，默认关闭，后期使用web worker\r\n            // compiling: !!options.compiling || false,   // 先移除\r\n        };\r\n        // 设置采样的参数\r\n        this.outputSampleRate = this.config.sampleRate;     // 输出采样率\r\n        this.oututSampleBits = this.config.sampleBits;      // 输出采样数位 8, 16\r\n    }\r\n\r\n    /**\r\n     * 开始录音\r\n     *\r\n     * @returns {Promise<{}>}\r\n     * @memberof Recorder\r\n     */\r\n    startRecord(): Promise<{}> {\r\n        if (this.context) {\r\n            // 关闭先前的录音实例，因为前次的实例会缓存少量前次的录音数据\r\n            this.destroyRecord();\r\n        }\r\n        // 初始化\r\n        this.initRecorder();\r\n\r\n        return navigator.mediaDevices.getUserMedia({\r\n            audio: true\r\n        }).then(stream => {\r\n            // audioInput表示音频源节点\r\n            // stream是通过navigator.getUserMedia获取的外部（如麦克风）stream音频输出，对于这就是输入\r\n            this.audioInput = this.context.createMediaStreamSource(stream);\r\n            this.stream = stream;\r\n        }/* 报错丢给外部使用者catch，后期可在此处增加建议性提示\r\n            , error => {\r\n            // 抛出异常\r\n            Recorder.throwError(error.name + \" : \" + error.message);\r\n        } */).then(() => {\r\n            // audioInput 为声音源，连接到处理节点 recorder\r\n            this.audioInput.connect(this.analyser);\r\n            this.analyser.connect(this.recorder);\r\n            // this.audioInput.connect(this.recorder);\r\n            // 处理节点 recorder 连接到扬声器\r\n            this.recorder.connect(this.context.destination);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 暂停录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    pauseRecord(): void {\r\n        this.needRecord = false;\r\n    }\r\n\r\n    /**\r\n     * 继续录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    resumeRecord(): void {\r\n        this.needRecord = true;\r\n    }\r\n\r\n    /**\r\n     * 停止录音\r\n     *\r\n     */\r\n    stopRecord(): void {\r\n        this.audioInput && this.audioInput.disconnect();\r\n        this.source && this.source.stop();\r\n        this.recorder.disconnect();\r\n        this.analyser.disconnect();\r\n        this.needRecord = true;\r\n    }\r\n\r\n    /**\r\n     * 销毁录音对象\r\n     *\r\n     */\r\n    destroyRecord(): Promise<{}> {\r\n        this.clearRecordStatus();\r\n        // 结束流\r\n        this.stopStream();\r\n\r\n        return this.closeAudioContext();\r\n    }\r\n\r\n    getAnalyseData() {\r\n        let dataArray = new Uint8Array(this.analyser.frequencyBinCount);\r\n        // 将数据拷贝到dataArray中。\r\n        this.analyser.getByteTimeDomainData(dataArray);\r\n\r\n        return dataArray;\r\n    }\r\n\r\n    // 获取录音数据\r\n    getData() {\r\n        let data: any = this.flat();\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * 清除状态\r\n     *\r\n     */\r\n    private clearRecordStatus() {\r\n        this.lBuffer.length = 0;\r\n        this.rBuffer.length = 0;\r\n        this.size = 0;\r\n        this.fileSize = 0;\r\n        this.PCM = null;\r\n        this.audioInput = null;\r\n        this.duration = 0;\r\n    }\r\n\r\n    /**\r\n     * 将二维数组转一维\r\n     *\r\n     * @private\r\n     * @returns  {float32array}     音频pcm二进制数据\r\n     * @memberof Recorder\r\n     */\r\n    private flat() {\r\n        let lData = null,\r\n            rData = new Float32Array(0);    // 右声道默认为0\r\n\r\n        // 创建存放数据的容器\r\n        if (1 === this.config.numChannels) {\r\n            lData = new Float32Array(this.size);\r\n        } else {\r\n            lData = new Float32Array(this.size / 2);\r\n            rData = new Float32Array(this.size / 2);\r\n        }\r\n        // 合并\r\n        let offset = 0; // 偏移量计算\r\n\r\n        // 将二维数据，转成一维数据\r\n        // 左声道\r\n        for (let i = 0; i < this.lBuffer.length; i++) {\r\n            lData.set(this.lBuffer[i], offset);\r\n            offset += this.lBuffer[i].length;\r\n        }\r\n\r\n        offset = 0;\r\n        // 右声道\r\n        for (let i = 0; i < this.rBuffer.length; i++) {\r\n            rData.set(this.rBuffer[i], offset);\r\n            offset += this.rBuffer[i].length;\r\n        }\r\n\r\n        return {\r\n            left: lData,\r\n            right: rData\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 初始化录音实例\r\n     */\r\n    private initRecorder(): void {\r\n        // 清空数据\r\n        this.clearRecordStatus();\r\n\r\n        this.context = new (window.AudioContext || window.webkitAudioContext)();\r\n\r\n        this.analyser = this.context.createAnalyser();  // 录音分析节点\r\n        this.analyser.fftSize = 2048;                   // 表示存储频域的大小\r\n\r\n        // 第一个参数表示收集采样的大小，采集完这么多后会触发 onaudioprocess 接口一次，该值一般为1024,2048,4096等，一般就设置为4096\r\n        // 第二，三个参数分别是输入的声道数和输出的声道数，保持一致即可。\r\n        let createScript = this.context.createScriptProcessor || this.context.createJavaScriptNode;\r\n        this.recorder = createScript.apply(this.context, [4096, this.config.numChannels, this.config.numChannels]);\r\n\r\n        // 音频采集\r\n        this.recorder.onaudioprocess = e => {\r\n            if (!this.needRecord) {\r\n                return;\r\n            }\r\n            // 左声道数据\r\n            // getChannelData返回Float32Array类型的pcm数据\r\n            let lData = e.inputBuffer.getChannelData(0),\r\n                rData = null,\r\n                vol = 0;        // 音量百分比\r\n\r\n            this.lBuffer.push(new Float32Array(lData));\r\n\r\n            this.size += lData.length;\r\n\r\n            // 判断是否有右声道数据\r\n            if (2 === this.config.numChannels) {\r\n                rData = e.inputBuffer.getChannelData(1);\r\n                this.rBuffer.push(new Float32Array(rData));\r\n\r\n                this.size += rData.length;\r\n            }\r\n\r\n            // 边录边转处理 暂时不支持\r\n            // if (this.config.compiling) {\r\n            //     let pcm = this.transformIntoPCM(lData, rData);\r\n\r\n            //     this.tempPCM.push(pcm);\r\n            //     // 计算录音大小\r\n            //     this.fileSize = pcm.byteLength * this.tempPCM.length;\r\n            // } else {\r\n                // 计算录音大小\r\n                this.fileSize = Math.floor(this.size / Math.max( this.inputSampleRate / this.outputSampleRate, 1))\r\n                    * (this.oututSampleBits / 8)\r\n            // }\r\n            // 为何此处计算大小需要分开计算。原因是先录后转时，是将所有数据一起处理，边录边转是单个 4096 处理，\r\n            // 有小数位的偏差。\r\n\r\n            // 计算音量百分比\r\n            vol = Math.max.apply(Math, lData) * 100;\r\n            // 统计录音时长\r\n            this.duration += 4096 / this.inputSampleRate;\r\n            // 录音时长回调\r\n            this.onprocess && this.onprocess(this.duration);\r\n            // 录音时长及响度回调\r\n            this.onprogress && this.onprogress({\r\n                duration: this.duration,\r\n                fileSize: this.fileSize,\r\n                vol,\r\n                // data: this.tempPCM,     // 当前所有的pcm数据，调用者控制增量\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 终止流（这可以让浏览器上正在录音的标志消失掉）\r\n     * @private\r\n     * @memberof Recorder\r\n     */\r\n    private stopStream() {\r\n        if (this.stream && this.stream.getTracks) {\r\n            this.stream.getTracks().forEach(track => track.stop());\r\n            this.stream = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * close兼容方案\r\n     * 如firefox 30 等低版本浏览器没有 close方法\r\n     */\r\n    private closeAudioContext() {\r\n        if (this.context && this.context.close && this.context.state !== 'closed') {\r\n            return this.context.close();\r\n        } else {\r\n            return new Promise((resolve) => {\r\n                resolve();\r\n            });\r\n        }\r\n    }\r\n\r\n    // getUserMedia 版本兼容\r\n    static initUserMedia() {\r\n        if (navigator.mediaDevices === undefined) {\r\n            navigator.mediaDevices = {};\r\n        }\r\n\r\n        if (navigator.mediaDevices.getUserMedia === undefined) {\r\n            navigator.mediaDevices.getUserMedia = function(constraints) {\r\n                let getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\r\n\r\n                if (!getUserMedia) {\r\n                    return Promise.reject(new Error('浏览器不支持 getUserMedia !'));\r\n                }\r\n\r\n                return new Promise(function(resolve, reject) {\r\n                    getUserMedia.call(navigator, constraints, resolve, reject);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 将获取到到左右声道的Float32Array数据编码转化\r\n     *\r\n     * @param {Float32Array} lData  左声道数据\r\n     * @param {Float32Array} rData  有声道数据\r\n     * @returns DataView\r\n     */\r\n    private transformIntoPCM(lData, rData) {\r\n        let lBuffer = new Float32Array(lData),\r\n            rBuffer = new Float32Array(rData);\r\n\r\n        let data = compress({\r\n            left: lBuffer,\r\n            right: rBuffer,\r\n        }, this.inputSampleRate, this.outputSampleRate);\r\n\r\n        return encodePCM(data, this.oututSampleBits, this.littleEdian);\r\n    }\r\n\r\n    static getPermission(): Promise<{}> {\r\n        this.initUserMedia();\r\n\r\n        return navigator.mediaDevices.getUserMedia({audio: true}).then((stream) => {\r\n            stream && stream.getTracks().forEach(track => track.stop());\r\n        });\r\n    }\r\n}\r\n","module.exports = require(\"./dist/recorder.js\");\r\n"],"names":["render","_vm","this","_c","_self","staticClass","staticStyle","attrs","model","value","area","name","callback","$$v","$set","expression","on","$event","showPicker","columns","onConfirm","note","afterRead","onOversize","fileList","startRecordAudio","_v","_s","recorder","duration","toFixed","stopRecordAudio","playRecordAudio","onSubmit","staticRenderFns","data","project_code","area_id","beginRecoding","Recorder","sampleBits","sampleRate","numChannels","nowDuration","audioUrl","mounted","$route","query","$http","post","beforeDestroy","destroyRecorder","methods","file","$toast","then","console","log","start","error","message","stop","play","destroy","uploadWAVData","wavBlob","getWAVBlob","formData","FormData","newbolb","Blob","type","fileOfBlob","File","Date","getTime","append","$postFile","isRecorderAudio","fileArr","length","map","item","content","push","substring","indexOf","confirm","$dialog","title","catch","file_list","alert","component","t","e","module","exports","n","i","o","l","call","m","c","d","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","__esModule","create","bind","default","prototype","hasOwnProperty","p","s","setUint8","charCodeAt","compress","Math","max","left","a","right","floor","u","Float32Array","f","encodePCM","ArrayBuffer","DataView","min","setInt8","setInt16","encodeWAV","byteLength","setUint32","setUint16","getUint8","__extends","setPrototypeOf","__proto__","Array","constructor","isrecording","ispause","isplaying","setOption","setNewOption","Promise","reject","startRecord","pause","pauseRecord","resume","resumeRecord","stopRecord","onplay","addPlayEnd","onplayend","getWAV","buffer","getPlayTime","pausePlay","onpauseplay","resumePlay","onresumeplay","stopPlay","onstopplay","destroyPlay","destroyRecord","getRecordAnalyseData","getAnalyseData","getPlayAnalyseData","getPCM","getData","inputSampleRate","outputSampleRate","oututSampleBits","littleEdian","getPCMBlob","downloadPCM","config","downloadWAV","download","getChannelData","getInt16","getInt8","document","createElement","href","window","URL","createObjectURL","click","decodeAudioData","slice","createBufferSource","onended","currentTime","connect","destination","throwError","h","y","AudioContext","webkitAudioContext","createAnalyser","fftSize","Uint8Array","frequencyBinCount","getByteTimeDomainData","Error","size","lBuffer","rBuffer","tempPCM","inputSampleBits","fileSize","needRecord","Int16Array","initUserMedia","context","initRecorder","navigator","mediaDevices","getUserMedia","audio","audioInput","createMediaStreamSource","stream","analyser","disconnect","source","clearRecordStatus","stopStream","closeAudioContext","flat","PCM","set","createScriptProcessor","createJavaScriptNode","apply","onaudioprocess","inputBuffer","onprocess","onprogress","vol","getTracks","forEach","close","state","webkitGetUserMedia","mozGetUserMedia","transformIntoPCM","getPermission"],"sourceRoot":""}